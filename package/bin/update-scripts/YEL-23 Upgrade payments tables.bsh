import java.net.*;
import java.util.*;
import java.lang.*;
import java.sql.*;
import java.io.*;
import java.math.*;
import java.nio.file.*;
import java.util.logging.*;
import java.util.regex.*;
import com.ail.core.persistence.hibernate.HibernateSessionBuilder;
import org.hibernate.*;
import com.ail.core.*;
import com.ail.pageflow.*;
import com.ail.insurance.*;
import com.ail.financial.*;
import com.ail.insurance.policy.*;


main() {	
    if (migrate(bsh.args[0], bsh.args[1])) {
        System.exit(0);
    }
    else {
        System.exit(1);
    }
}

boolean migrate(String jboss, String bin) {

	Logger.getLogger("org.hibernate").setLevel(Level.SEVERE);

	try {	
	
		CoreProxy core = new CoreProxy();
		String properties = readFile(jboss + "/standalone/configuration/standalone.xml");
		Pattern datasource = Pattern.compile("(java:\\/PersistenceDS).*?<\\/datasource>");
		
		Pattern pattern = Pattern.compile("<connection-url>(jdbc:mysql[^<]*)<\\/connection-url>\\s*<driver>mysql<\\/driver>\\s*<security>\\s*<user-name>(.*?)<\\/user-name>\\s*<password>(.*?)<\\/password>");
		Matcher matches = pattern.matcher(properties);
		
		String url;
		String userName;
		String password;
		
		matches.find();
		url = matches.group(1);
		userName = matches.group(2);
		password = matches.group(3);
		
		print("Update being applied to: "+url);
		
		Map config = new HashMap();
	    
		config.put("hibernate.listeners.envers.autoRegister", "false");
		
	    config.put("hibernate.connection.url", url);
	    config.put("hibernate.connection.username", userName);
	    config.put("hibernate.connection.password", password);
	    config.put("hibernate.connection.driver_class", "com.mysql.jdbc.Driver");
	    config.put("hibernate.connection.current_session_context_class", "thread");
	    config.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
	    config.put("hibernate.connection.pool_size", "1");
	    
	    config.put("hibernate.bytecode.use_reflection_optimizer", "true");
	    config.put("hibernate.show_sql", "false");
	    config.put("hibernate.format_sql", "true");
	    
	    Session session = HibernateSessionBuilder.getSessionFactory(config).openSession();
	    
	    Query rawDataQuery = session.createSQLQuery(
	    	"select pol.polUID, pol.polPaymentDetails, pol.polPaymentHistory, pol.polPaymentOption from polpolicy pol " + 
	    	"where pol.polPaymentDetails is not null or pol.polPaymentHistory is not null or pol.polPaymentOption is not null");
		
		List rawPolicies = rawDataQuery.list();
		List rows = new ArrayList();
		for (Object[] rawPolicy : rawPolicies) {
			rows.add(new Object[]{Long.valueOf(rawPolicy[0].toString()), rawPolicy[1], rawPolicy[2], rawPolicy[3]});
		}
		session.close();
		
		session = HibernateSessionBuilder.getSessionFactory(config).openSession();
		Transaction tx = session.beginTransaction();
		
		for (Object[] row : rows) {	
			
			Long id = row[0];
        	String paymentDetail = row[1];
        	String paymentHistory = row[2];
        	String paymentOption = row[3];  
        	
        	Query policyQuery = session.getNamedQuery("get.policy.by.systemId");
        	
			policyQuery.setParameter(0, id);
			
			List policyList = policyQuery.list();
			Policy policy = policyList.get(0);
			
			if (paymentDetail != null) {
            	PaymentSchedule details = (PaymentSchedule)core.fromXML(PaymentSchedule.class, new XMLString(paymentDetail)); 
                policy.setPaymentDetails(details);
            }
			
			if (paymentHistory != null) {
				XMLString xmlHistory = new XMLString(paymentHistory);
				List paymentRecords = core.fromXML(xmlHistory.getType(), xmlHistory);
				policy.setPaymentHistory(paymentRecords);
			}
			
			if (paymentOption != null) {
				XMLString xmlOptions = new XMLString(paymentOption);
				List otptions = core.fromXML(xmlOptions.getType(), xmlOptions);
				policy.setPaymentOption(otptions);
			}
			
			session.flush();
	        session.clear();
			      
        }

		tx.commit();
        session.close();
		
		return true;
		
	} catch (Throwable e) {
        print("Exception: YEL-23 Upgrade payments tables: " + e.getMessage());
        e.printStackTrace();
        return false;
    }
		
}

String readFile(String file) {
    
    String line = null;
    StringBuilder stringBuilder = new StringBuilder();
    BufferedReader reader = new BufferedReader(new FileReader(file));
    while((line = reader.readLine()) != null) {
        stringBuilder.append(line);
    }
    return stringBuilder.toString();
}

main();