/* Copyright Applied Industrial Logic Limited 2002. All rights reserved. */
/*
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

package com.ail.core.logging;

import java.security.Principal;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.ail.core.Core;
import com.ail.core.CoreUser;
import com.ail.core.VersionEffectiveDate;
import com.ail.core.configure.AbstractConfigurationLoader;
import com.ail.core.configure.Builder;
import com.ail.core.configure.Builders;
import com.ail.core.configure.Configuration;
import com.ail.core.configure.ConfigurationOwner;
import com.ail.core.configure.JDBCConfigurationLoader;
import com.ail.core.configure.Parameter;
import com.ail.core.configure.Type;
import com.ail.core.configure.Types;

/**
 * The tests defined here exercise the Core system's factory.
 * They use the Core class as a Service or core client would.
 * Note: These tests assume that the JDBCConfigurationLoader is being used.
 */
public class TestCoreLogging implements CoreUser, ConfigurationOwner {
	private Core core=null;
	private VersionEffectiveDate versionEffectiveDate=null;
	private String TestNamespace="TESTNAMESPACE";
	private String configurationNamespace=TestNamespace;

	/**
     * Tidy up (delete) the testdata generated by this set of tests.
	 * @throws SQLException
     */
	private void tidyUpTestData() throws SQLException {
		JDBCConfigurationLoader jload=(JDBCConfigurationLoader)AbstractConfigurationLoader.loadLoader();
		Connection con=jload.openConnection();
	    Statement st=con.createStatement();
        String table = jload.getLoaderParams().getProperty("table");
		st.execute("DELETE FROM "+table+" WHERE NAMESPACE='"+TestNamespace+"'");
		st.close();
        con.close();
    }

	/**
     * Create a simple configuration for use in tests.
     * <Configuration name="SimpleConfigurationName" version="9.1">
     *   <Builders>
     *     <Builder name="ClassBuilder" factory="com.ail.core.factory.ClassFactory"/>
     *   </Builders>
	 *   <Types>
     *     <Type name="ClassAccessor" builder="ClassBuilder" key="com.ail.core.command.EntryPointAccessor">
	 *        <Parameter name="ServiceClass" value="com.ail.core.logging.SystemOutLoggerService"/>
     *     </Type>
	 *     <Type name="InfoLogger" builder="ClassBuilder" key="com.ail.core.logging.LoggerCommand">
	 *        <Parameter name="Accessor" value="ServiceAccessor"/>
     *     </Type>
     *   </Types>
     * </Configuration>
     * @return An instance of a simple configuration
     */
	private Configuration createSimpleConfiguration() {
		Parameter p=null;
		Types ts=null;
		Type t=null;

		Configuration config=new Configuration();
	    config.setName("SimpleConfigurationName");
	    config.setVersion("9.1");

		Builders blds=new Builders();
        config.setBuilders(blds);

        Builder b=new Builder();
        blds.addBuilder(b);
        b.setName("ClassBuilder");
        b.setFactory("com.ail.core.factory.ClassFactory");
        blds.addBuilder(b);

		ts=new Types();
        config.setTypes(ts);
        t=new Type();
		ts.addType(t);
		t.setName("LoggingService");
        t.setBuilder("ClassBuilder");
		t.setKey("com.ail.core.command.ClassAccessor");
		p=new Parameter();
        p.setName("ServiceClass");
		p.setValue("com.ail.core.logging.SystemOutLoggerService");
		t.addParameter(p);

        t=new Type();
		ts.addType(t);
		t.setName("NullService");
        t.setBuilder("ClassBuilder");
		t.setKey("com.ail.core.command.ClassAccessor");
		p=new Parameter();
        p.setName("EntryPointClass");
		p.setValue("com.ail.core.NullService");
		t.addParameter(p);

		t=new Type();
        ts.addType(t);
		p=new Parameter();
        t.setName("InfoLogger");
        t.setBuilder("ClassBuilder");
        t.setKey("com.ail.core.logging.LoggingCommandImpl");
        p.setName("Accessor");
        p.setValue("LoggingService");
		t.addParameter(p);

		t=new Type();
        ts.addType(t);
		p=new Parameter();
        t.setName("DebugLogger");
        t.setBuilder("ClassBuilder");
        t.setKey("com.ail.core.logging.LoggingCommandImpl");
        p.setName("Accessor");
        p.setValue("LoggingService");
		t.addParameter(p);

		t=new Type();
        ts.addType(t);
		p=new Parameter();
        t.setName("WarningLogger");
        t.setBuilder("ClassBuilder");
        t.setKey("com.ail.core.logging.LoggingCommandImpl");
        p.setName("Accessor");
        p.setValue("LoggingService");
		t.addParameter(p);

		t=new Type();
        ts.addType(t);
		p=new Parameter();
        t.setName("ErrorLogger");
        t.setBuilder("ClassBuilder");
        t.setKey("com.ail.core.logging.LoggingCommandImpl");
        p.setName("Accessor");
        p.setValue("LoggingService");
		t.addParameter(p);

		t=new Type();
        ts.addType(t);
		p=new Parameter();
        t.setName("FatalLogger");
        t.setBuilder("ClassBuilder");
        t.setKey("com.ail.core.logging.LoggingCommandImpl");
        p.setName("Accessor");
        p.setValue("LoggingService");
		t.addParameter(p);

		return config;
    }

    /**
     * Sets up the fixture (run before every test).
     * Get an instance of Core, and delete the testnamespace from the config table.
     * @throws SQLException
     */
	@Before
    public void setUp() throws SQLException {
		versionEffectiveDate=new VersionEffectiveDate();
		tidyUpTestData();
        core=new Core(this);
		Configuration config=createSimpleConfiguration();
	    core.setConfiguration(config);
		versionEffectiveDate=new VersionEffectiveDate();
    }

    /**
     * Tears down the fixture (run after each test finishes)
     * @throws SQLException
     */
	@After
    public void tearDown() throws SQLException {
		tidyUpTestData();
    }

	/**
     * Method demanded by the CoreUser interface.
     * @return A date to use to selecte the corrent version of config info.
     */
    @Override
    public VersionEffectiveDate getVersionEffectiveDate() {
		return versionEffectiveDate;
    }

    /**
     * Get the security principal associated with this instance.
     * @return The associated security principal - if defined, null otherwise.
     */
    @Override
    public Principal getSecurityPrincipal() {
        return null;
    }

    /**
     * Method demanded by the ConfigurationOwner interface.
	 * @param config Configuration to use from now on.
     */
    @Override
    public void setConfiguration(Configuration config) {
		core.setConfiguration(config);
    }

	/**
     * Method demanded by the ConfigurationOwner interface.
	 * @return The current configuration (at versionEffectiveDate).
     */
    @Override
    public Configuration getConfiguration() {
		return core.getConfiguration();
    }

	/**
     * Method demanded by the ConfigurationOwner interface.
	 * @return The configuration namespace we're using
     */
    @Override
    public String getConfigurationNamespace() {
		return configurationNamespace;
    }

    public void setConfigurationNamespace(String configurationNamespace) {
		this.configurationNamespace = configurationNamespace;
	}

	/**
     * Method demanded by the ConfigurationOwner interface.
     */
    @Override
    public void resetConfiguration() {
    }

	/**
	 * Check that messages can be written to the info log.
     * <ol>
     * <li>Write a message to the log.</li>
	 * <li>File if any exceptions or errors are thrown.</li>
     * </ol>
     */
    @Test
    public void testInfoLog() throws Exception {
        core.logInfo("Test info message");
        core.logDebug("Test debug message");
        core.logWarning("Test warning message");
        // Output from the error logger will make junit think the test
        // has failed, so we won't call this one.
        //core.logError("Test error message");
        core.logFatal("Test fatal message");
    }
}
