import java.net.*;
import java.util.*;
import java.lang.*;
import java.sql.*;
import java.io.*;
import java.math.*;
import java.nio.file.*;
import java.util.logging.*;
import java.util.regex.*;
import com.ail.core.persistence.hibernate.HibernateSessionBuilder;
import org.hibernate.*;
import com.ail.core.*;
import com.ail.pageflow.*;
import com.ail.insurance.*;
import com.ail.financial.*;
import com.ail.insurance.policy.*;

main() {
    if (migrate(bsh.args[0], bsh.args[1])) {
        System.exit(0);
    }
    else {
        System.exit(1);
    }
}

boolean migrate(String jboss, String bin) {
    Logger.getLogger("org.hibernate").setLevel(Level.SEVERE);

    try {
        url = System.getenv("dbUrl");
        userName = System.getenv("dbUsername");
        password = System.getenv("dbPassword");

        print("Update being applied to: "+url);

        config = new HashMap();

        config.put("hibernate.listeners.envers.autoRegister", "false");

        config.put("hibernate.connection.url", url);
        config.put("hibernate.connection.username", userName);
        config.put("hibernate.connection.password", password);
        config.put("hibernate.connection.driver_class", "com.mysql.jdbc.Driver");
        config.put("hibernate.connection.current_session_context_class", "thread");
        config.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
        config.put("hibernate.connection.pool_size", "1");

        config.put("hibernate.bytecode.use_reflection_optimizer", "true");
        config.put("hibernate.show_sql", "false");
        config.put("hibernate.format_sql", "true");

        migratePolicyClauses(config);

        return true;
    } catch (Throwable e) {
        print("Exception: OU-951 Migrate clause date " + e.getMessage());
        e.printStackTrace();
        return false;
    }
}

void migratePolicyClauses(Map config) throws Throwable {
    core = new CoreProxy();

    session = HibernateSessionBuilder.getSessionFactory(config).openSession();

    rawDataQuery = session.createSQLQuery(
            "select polUID, secUID, polClause, secClause "+ 
            "from polPolicy "+  
            "left join jPolSecSec on jPolSecSec.UIDpol = polUID "+ 
            "left join secSection on jPolSecSec.sectionUIDsec =  secUID "+
            "where secClause is not null or polClause is not null");

    results = rawDataQuery.list();
    rows = new ArrayList();
    for (result : results) {
        rows.add(new Object[]{Long.valueOf(result[0].toString()), Long.valueOf(result[1].toString()), result[2], result[3]});
    }
    session.close();

    session = HibernateSessionBuilder.getSessionFactory(config).openSession();
    tx = session.beginTransaction();

    for (Object[] row : rows) {
        policyId = row[0];
        sectionId = row[1];
        policyClauseXML = row[2];
        sectionClauseXML = row[3];

        policyQuery = session.getNamedQuery("get.policy.by.systemId");
        policyQuery.setParameter(0, policyId);

        policyList = policyQuery.list();
        policy = policyList.get(0);

        if (policyClauseXML != null) {
            xmlString = new XMLString(policyClauseXML);
            clauses = core.fromXML(xmlString.getType(), xmlString);
            policy.setClause(clauses);
        }
        
        if (sectionClauseXML != null) {
            for(section: policy.getSection()) {
                if (section.getSystemId() == sectionId) {
                    xmlString = new XMLString(sectionClauseXML);
                    clauses = core.fromXML(xmlString.getType(), xmlString);
                    section.setClause(clauses);
                }
            }
        }

        session.flush();
        session.clear();
    }

    tx.commit();
    session.close();
}

String readFile(String file) {
    line = null;
    stringBuilder = new StringBuilder();
    reader = new BufferedReader(new FileReader(file));
    while((line = reader.readLine()) != null) {
        stringBuilder.append(line);
    }
    return stringBuilder.toString();
}

main();