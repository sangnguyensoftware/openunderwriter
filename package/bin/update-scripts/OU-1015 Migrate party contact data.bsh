import java.net.*;
import java.util.*;
import java.lang.*;
import java.sql.*;
import java.io.*;
import java.math.*;
import java.nio.file.*;
import java.util.logging.*;
import java.util.regex.*;
import com.ail.core.persistence.hibernate.HibernateSessionBuilder;
import org.hibernate.*;
import com.ail.core.*;
import com.ail.pageflow.*;
import com.ail.insurance.*;
import com.ail.financial.*;
import com.ail.insurance.policy.*;

main() {
    if (migrate(bsh.args[0], bsh.args[1])) {
        System.exit(0);
    }
    else {
        System.exit(1);
    }
}

boolean migrate(String jboss, String bin) {
    Logger.getLogger("org.hibernate").setLevel(Level.SEVERE);

    try {
        url = System.getenv("dbUrl");
        userName = System.getenv("dbUsername");
        password = System.getenv("dbPassword");

        print("Update being applied to: "+url);

        config = new HashMap();

        config.put("hibernate.listeners.envers.autoRegister", "false");

        config.put("hibernate.connection.url", url);
        config.put("hibernate.connection.username", userName);
        config.put("hibernate.connection.password", password);
        config.put("hibernate.connection.driver_class", "com.mysql.jdbc.Driver");
        config.put("hibernate.connection.current_session_context_class", "thread");
        config.put("hibernate.dialect", "org.hibernate.dialect.MySQLDialect");
        config.put("hibernate.connection.pool_size", "1");
        config.put("hibernate.bytecode.use_reflection_optimizer", "true");
        config.put("hibernate.show_sql", "false");
        config.put("hibernate.format_sql", "true");

        migrateData(config);

        return true;
    } catch (Throwable e) {
        print("Exception: OU-1015 Migrate party contact data " + e.getMessage());
        e.printStackTrace();
        return false;
    }
}

void migrateData(Map config) throws Throwable {
    core = new CoreProxy();

    session = HibernateSessionBuilder.getSessionFactory(config).openSession();

    rawDataQuery = session.createSQLQuery("select parUID, parLine1, parLine2, parLine3, parLine4, parLine5, parTown, parCounty, parCountry, parPostcode, parEmailAddress, parMobilephoneNumber, parTelephoneNumber, parClaimTelephoneNumber, parPaymentTelephoneNumber, parPolicyEmailAddress, parQuoteEmailAddress, parQuoteTelephoneNumber from parParty;"); 

    results = rawDataQuery.list();
    rows = new ArrayList();
    for (result : results) {
        row = new HashMap();
        idx = 0;
        row.put("parUID", Long.valueOf(result[idx++].toString()));
        row.put("parLine1", result[idx++]);
        row.put("parLine2", result[idx++]);
        row.put("parLine3", result[idx++]);
        row.put("parLine4", result[idx++]);
        row.put("parLine5", result[idx++]);
        row.put("parTown", result[idx++]);
        row.put("parCounty", result[idx++]);
        row.put("parCountry", result[idx++]);
        row.put("parPostcode", result[idx++]);
        row.put("parEmailAddress", result[idx++]);
        row.put("parMobilephoneNumber", result[idx++]);
        row.put("parTelephoneNumber", result[idx++]);
        row.put("parClaimTelephoneNumber", result[idx++]);
        row.put("parPaymentTelephoneNumber", result[idx++]);
        row.put("parPolicyEmailAddress", result[idx++]);
        row.put("parQuoteEmailAddress", result[idx++]);
        row.put("parQuoteTelephoneNumber", result[idx++]);
        rows.add(row);
    }
    session.close();

    session = HibernateSessionBuilder.getSessionFactory(config).openSession();
    tx = session.beginTransaction();

    for (Map row : rows) {
        parUID = row.get("parUID");
        party = fetchParty(session, parUID);
        
        if (rowHasAddressDefined(row)) {
            address = new com.ail.party.Address(
                row.get("parLine1"),
                row.get("parLine2"),
                row.get("parLine3"),
                row.get("parLine4"),
                row.get("parLine5"),
                row.get("parTown"),
                row.get("parCounty"),
                row.get("parCountry"),
                row.get("parPostcode")
            );
            party.setAddress(address);
        }
        
        if (rowHasFieldDefined(row, "parEmailAddress")) {
            party.setEmailAddress(row.get("parEmailAddress"));
        }
        
        if (rowHasFieldDefined(row, "parMobilephoneNumber")) {
            party.setMobilephoneNumber(row.get("parMobilephoneNumber"));
        }

        if (rowHasFieldDefined(row, "parTelephoneNumber")) {
            party.setTelephoneNumber(row.get("parTelephoneNumber"));
        }

        if (rowHasFieldDefined(row, "parClaimTelephoneNumber")) {
            party.setClaimTelephoneNumber(row.get("parClaimTelephoneNumber"));
        }

        if (rowHasFieldDefined(row, "parPaymentTelephoneNumber")) {
            party.setPaymentTelephoneNumber(row.get("parPaymentTelephoneNumber"));
        }

        if (rowHasFieldDefined(row, "parPolicyEmailAddress")) {
            party.setPolicyEmailAddress(row.get("parPolicyEmailAddress"));
        }

        if (rowHasFieldDefined(row, "parQuoteEmailAddress")) {
            party.setQuoteEmailAddress(row.get("parQuoteEmailAddress"));
        }

        if (rowHasFieldDefined(row, "parQuoteTelephoneNumber")) {
            party.setQuoteTelephoneNumber(row.get("parQuoteTelephoneNumber"));
        }

        session.flush();
        session.clear();
    }

    tx.commit();
    session.close();
}

fetchParty(session, parUID) {
    return session.getNamedQuery("get.party.by.systemId").setParameter(0, parUID).list().get(0);
}

rowHasAddressDefined(row) {
    return rowHasFieldDefined(row, "parLine1") ||
           rowHasFieldDefined(row, "parLine2") ||
           rowHasFieldDefined(row, "parLine3") ||
           rowHasFieldDefined(row, "parLine4") ||
           rowHasFieldDefined(row, "parLine5") ||
           rowHasFieldDefined(row, "parTown") ||
           rowHasFieldDefined(row, "parCounty") ||
           rowHasFieldDefined(row, "parCountry") ||
           rowHasFieldDefined(row, "parPostcode");
}

rowHasFieldDefined(row, fieldName) {
    return row.get(fieldName)!=null && row.get(fieldName).length()!=0;
}

String readFile(String file) {
    line = null;
    stringBuilder = new StringBuilder();
    reader = new BufferedReader(new FileReader(file));
    while((line = reader.readLine()) != null) {
        stringBuilder.append(line);
    }
    return stringBuilder.toString();
}

main();